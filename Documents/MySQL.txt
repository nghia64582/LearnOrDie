1. What is MySQL? (Relational Database, Client-Server Model):
    + Relational Database
    + Installing MySQL (MySQL Workbench, MySQL CLI)
    + Understanding Databases vs. Tables
    + Basic SQL Syntax (Case Sensitivity, Comments, Semicolon ;)

2. Core SQL Commands
    + Creating & Managing Databases :
        CREATE DATABASE my_database;
        SHOW DATABASES;
        DROP DATABASE my_database;

    + Creating Tables & Defining Data Types:
        CREATE TABLE users (
            id INT PRIMARY KEY AUTO_INCREMENT,
            name VARCHAR(100),
            email VARCHAR(255) UNIQUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

    + Inserting Data into Tables : 
        INSERT INTO users (name, email) VALUES ('John Doe', 'john@example.com');

    + Updating & Deleting Data :
        UPDATE users SET name = 'Jane Doe' WHERE id = 1;
        DELETE FROM users WHERE id = 1;

    + Selecting Data (Basic Queries) : 
        SELECT * FROM users;
        SELECT name, email FROM users WHERE id = 1;

    + Advanced SQL Queries & Functions
    + Filtering Data (WHERE, LIKE, IN, BETWEEN)
        SELECT * FROM users WHERE name LIKE 'J%';
        SELECT * FROM users WHERE id IN (1, 3, 5);
    + Sorting & Limiting Results (ORDER BY, LIMIT)
        SELECT * FROM users ORDER BY created_at DESC LIMIT 10;
    + Aggregate Functions (COUNT(), SUM(), AVG(), MAX(), MIN())
        SELECT COUNT(*) FROM users;
        SELECT AVG(salary) FROM employees;
    + Grouping Data (GROUP BY, HAVING)
        SELECT department, COUNT(*) FROM employees GROUP BY department;
Example : Get the total number of users who registered today.

3. Table Relationships & Joins
    + Types of Relationships (One-to-One, One-to-Many, Many-to-Many)
    + Primary & Foreign Keys
    + JOINs (INNER JOIN, LEFT JOIN, RIGHT JOIN, FULL JOIN)
        SELECT users.name, orders.amount
        FROM users
        INNER JOIN orders ON users.id = orders.user_id;
    + Subqueries & Nested Queries
        SELECT name FROM users WHERE id IN (SELECT user_id FROM orders);
Example: Get all orders with user names from two tables using JOIN.

4. Indexing & Performance Optimization
    + Why Indexing Matters?
    + Creating Indexes
        CREATE INDEX idx_email ON users(email);

    + Optimizing Queries (EXPLAIN, ANALYZE)
        EXPLAIN SELECT * FROM users WHERE email = 'john@example.com';

    + Understanding Transactions (COMMIT, ROLLBACK)
        START TRANSACTION;
        UPDATE accounts SET balance = balance - 100 WHERE id = 1;
        UPDATE accounts SET balance = balance + 100 WHERE id = 2;
        COMMIT;

Example : Identify slow queries and optimize them with indexes.

6. Stored Procedures & Triggers
    + Stored Procedures
        DELIMITER //
        CREATE PROCEDURE GetUsers()
        BEGIN
            SELECT * FROM users;
        END //
        DELIMITER ;

    + Triggers (Executing Actions Automatically)
        CREATE TRIGGER before_insert_user
        BEFORE INSERT ON users
        FOR EACH ROW SET NEW.created_at = NOW();

    + Views (Virtual Tables for Simplified Queries)
        CREATE VIEW user_orders AS
        SELECT users.name, orders.amount FROM users JOIN orders ON users.id = orders.user_id;
Example : Create a trigger that automatically logs changes in a table.

7. Database Security & Best Practices
    + User Privileges & Access Control
        CREATE USER 'dev_user'@'localhost' IDENTIFIED BY 'securepassword';
        GRANT SELECT, INSERT ON my_database.* TO 'dev_user'@'localhost';

    + Data Encryption & Hashing (SHA2(), AES_ENCRYPT())
        SELECT SHA2('password', 256);

    + Preventing SQL Injection (Use Prepared Statements)
        cursor.execute("SELECT * FROM users WHERE email = %s", (email,))

    + Backups & Restores (mysqldump)
        mysqldump -u root -p my_database > backup.sql
        mysql -u root -p my_database < backup.sql
Example : Create a new user with restricted database permissions.

8. Scaling & High Availability
    + Replication (Master-Slave, Master-Master) : 
        + Technique to handle large amount of request
        + One main db server and several smaller servers
        + The smaller server will update data from the main db
        + 
    + Partitioning & Sharding
        + Partitioning
        + Sharding
    + Load Balancing with MySQL Cluster
        +
    + NoSQL Alternatives (When to Use MongoDB, Redis, etc.)
    + Caching:
        + The technique is used to store memory to in-memory database  
            to increase speed of request, especially get resources
        + Some core features to compare:
            + 

---- DESIGN DATABASE
S1: Define entities:
    + Raw entities (Employee, Product, Category, Vehicle, Item, ...)
    + Session entities (Order, Check-in, Attendance)
    + Temporary entities (For n-n relationship, like product-category, class-student, ...)
S2: Define column, index, ...
--- NOTE:
 - In 1-n relationship, we shouldn't store number of object in (1) table due to redundancy, 
 - If there are 2 (1-n) relationships, like school-class and class-student, we shouldn't 
    store school id in student