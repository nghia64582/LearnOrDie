- Prerequisites (Before React)
    + HTML, CSS, JavaScript (ES6+)
    + DOM Manipulation (document.querySelector, addEventListener)
    + JavaScript Concepts:
    + ES6+ Features: let, const, arrow functions, template literals
    + Destructuring, spread/rest operators
    + Modules & Imports (import/export)
    + Promises & async/await
    + Array Methods (map, filter, reduce)
    =====> Practice: Build small projects using vanilla JavaScript before React.

- React Basics
    + Understanding React:
        + What is React? Why React?
            + Components-based javascript library
        + SPA (Single Page Applications): 80
            + Browser only load one time after server send html, css, js to client
            + Update current page with new data without reloading page
            + Increase speed, reduce load time
            + First loading time is long
            + Not good for SEO
        + Multi-Page Applications: 80
            + Browser send new html, css, js code each request (GET, POST, ...)
            + Update current page by getting a whole new html code
            + Increase the load for server side
        + JSX (JavaScript XML):
            + Exp :
                + const element = <h1>Hello, World!</h1>;
            + Pass variable:
                + const name = "Nghia";
                + const element = <h1>Hello, {name}!</h1>;
                + We can pass any valid function in js like 2 + 2, user.firstName, ...
            + If tag doesn't have child tag, we can close instantly:
                + const element = <img src={user.avatarUrl} />
            + Jsx can have child tag:
                + const element = (
                +  <div>
                +    <h1>Hello</h1>
                +    <h2>Are you there?</h2>
                +  </div>
                + );
    + Core Concepts:
        + Components:
            + Definition:

            + Function components:
                + Stateless, no state, no lifecycle function
                + Exp:
                    import React from 'react';

                    function MyComponent(props) {
                    return (
                        <div>
                        <h1>Hello, {props.name}!</h1>
                        <p>{props.message}</p>
                        </div>
                    );
                    }

                    export default MyComponent;

            + Class components:
                + Have state, lifecycle function
                + Exp:
                    import React from 'react';

                    class MyComponent extends React.Component {
                        constructor(props) {
                            super(props);
                            this.state = { count: 0 };
                        }

                        handleClick = () => {
                            this.setState(prevState => ({
                            count: prevState.count + 1
                            }));
                        };

                        render() {
                            return (
                            <div>
                                <h1>Count: {this.state.count}</h1>
                                <button onClick={this.handleClick}>Increment</button>
                            </div>
                            );
                        }
                    }

                    export default MyComponent;

            + Presentational components:
                + Only show data, don't have logic
                + Exp:
                    import React from 'react';

                    const Greeting = ({ name }) => {
                        return (
                            <div>
                            <h1>Hello, {name}!</h1>
                            <p>Welcome to my website.</p>
                            </div>
                        );
                    };

                    export default Greeting;

            + Container components:
                + Handle business logic and pass to presentational components.
                + Exp:

        + Props (Passing data between components):
            + Used to send data to components.
            + Props is unchangable, const
            + Exp:
                import React from "react";
                const Profile = (props) => {
                    // props.img_url = 'http://via.placeholder.com/350x150'
                    const style = {
                        padding: '10px',
                        border: '1px solid green',
                        display: 'block',
                    }
                    return (
                        <div style={style}>
                            <img src={props.logo_url} height="250px"/>
                            <h1>{props.title}</h1>
                        </div>
                    );
                }
                module.exports = Profile;

        + State (useState hook):
            + Use to manage state for components.
            + Need to use when update the content of components.
            + React.Component is base class for all components.
            + Need to use setState to update components.
            + Do not directly change (this.state = {'key':'value'}).
                + => Use setState(prevState => {...prevState}) instead.
                    + ...prevState ensure all keys are remain
                + Auto render component after update state.

        + Event Handling
            + Many event (onpaste, oncopy, onkeydown, onmousemove, ...)
                + A button has been clicked.
                + A file has been loaded.
                + A keyboard has been pressed.
                + A animation has started.
                + ............................
            + Can be used for any type of components
            + onClick:
                + Event happen when user click a component
                + Declare <input type="button" value="Add tag" onClick={addNewWord}/> (No "()" )
            + onChange:
                + Event happend when state change

        + Conditional Rendering (&&, ternary operator)
            + Use if else, switch case, ... to render object
            + 
        + Lists & Keys (map to render lists)
            + 
    =====> Project Idea: Build a Todo App to practice state & props.

- Intermediate React
    + React Hooks (Must Learn)
        + useEffect (Handling side effects, API calls)
        + useContext (Avoid prop drilling)
        + useRef (Manipulating DOM directly)
        + useReducer (Alternative to useState for complex logic)
    + React Router
        + react-router-dom
        + Dynamic Routes (:id)
        + Programmatic Navigation (useNavigate, useParams)
    + State Management
        + Lifting State Up (Sharing state between components)
        + Context API (For global state)
        + Redux Toolkit (For large-scale applications)
    =====> Project Idea: Build a Weather App using API calls & React Router.

- Advanced React
    + Performance Optimization
        + React.memo (Optimize re-rendering)
        + useCallback & useMemo (Memoization)
        + Code Splitting & Lazy Loading (React.lazy, Suspense)
    + Advanced Patterns
        + Higher-Order Components (HOC)
        + Custom Hooks (useFetch, useToggle)
        + Compound Components
    + Fetching Data & API Handling
        + fetch() vs. axios
        + Error handling & loading states
    =====> Project Idea: Build an E-commerce App with Redux & API integration.

- Full-Stack React (Optional but Useful)
    + Backend Integration
        + Node.js + Express.js
        + REST API vs GraphQL
        + Authentication (JWT, OAuth)
    + Database Choices
        + MySQL / PostgreSQL (SQL)
        + MongoDB / Firebase (NoSQL)
    =====> Project Idea: Build a MERN Stack App (React + Node.js + MongoDB).

- Deployment & Best Practices
    + Deployment
        Vercel, Netlify (for frontend)
        Docker, AWS, DigitalOcean (for full-stack)
    + Testing in React
        Jest & React Testing Library
        Cypress (End-to-End Testing)
    + Best Practices
        Folder Structure (components/, hooks/, pages/)
        Writing Clean Code (DRY, SOLID principles)
- Bonus (Extra Topics for Growth)
    + TypeScript with React
    + Server-Side Rendering (Next.js)
    + React Native (for Mobile Development)
    + WebSockets (Real-time updates)

------ SUMMARY: React Learning Path
    + Learn JavaScript (ES6+), HTML, CSS
    + Master React Fundamentals (JSX, Props, State, Hooks)
    + React Router, State Management (Redux, Context API)
    + Optimize Performance (React.memo, useMemo, Lazy Loading)
    + Integrate Backend (Node.js, APIs, Authentication)
    + Deploy and Test Your Applications

1. ‚öõÔ∏è Components
    - React is component-based. A component is a reusable piece of UI (like a button, card, or entire page).

    - Two types:
        + Function components (most common now)
        + Class components (older, still used)

    function Hello() {
    return <h1>Hello World!</h1>;
    }
2. üéØ JSX (JavaScript XML)
    - JSX lets you write HTML-like code inside JavaScript.
    - It compiles to React.createElement(...).
        const element = <h1>Hello, JSX!</h1>;
    - You can embed expressions:

    const name = "Alice";
    const greet = <h1>Hello, {name}!</h1>;
3. üì¶ Props (Properties)
    - Props are inputs to a component.
    - They let you pass data from a parent to a child component.

    function Greeting({ name }) {
        return <p>Hello, {name}</p>;
    }

    // Usage:
    <Greeting name="Bob" />
4. üß† State
    State is data that changes over time and affects what the component renders.

    Use useState() to manage it in functional components.

    import { useState } from 'react';

    function Counter() {
    const [count, setCount] = useState(0);

    return <button onClick={() => setCount(count + 1)}>Count: {count}</button>;
    }
5. üîÅ Hooks
    Hooks are functions that add stateful logic to function components.

    Common hooks:

    useState() ‚Äì for local state

    useEffect() ‚Äì for side effects (e.g., fetch data, set up a timer)

    useContext() ‚Äì consume context

    useRef() ‚Äì reference DOM or persist mutable values

    useMemo() and useCallback() ‚Äì performance optimizations

    useEffect(() => {
    console.log('Component mounted or updated');
    }, [dependency]);
6. üåê Context
    A way to pass data globally without prop drilling.

    Useful for things like theme, user auth, language.

    const ThemeContext = createContext();

    <ThemeContext.Provider value="dark">
    <MyComponent />
    </ThemeContext.Provider>
7. üå≤ Virtual DOM & Reconciliation
    React uses a Virtual DOM ‚Äî an in-memory representation of the real DOM.

    When state/props change, React updates only what‚Äôs necessary in the actual DOM (efficient!).

8. üîÅ Rendering & Re-rendering
    A component re-renders when:
    Its state changes
    Its props change
    Its parent re-renders

9. üîÄ Conditional Rendering
    Show or hide components based on conditions.

    {isLoggedIn ? <Dashboard /> : <Login />}
10. üö¶ Lifecycle (via hooks in functional components)
    useEffect replaces lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount.

    useEffect(() => {
    // on mount
    return () => {
        // on unmount
    };
    }, []);
üîö Summary Table
- Concept	    Purpose
- Component	    Reusable UI building block
- JSX	        HTML-like syntax in JavaScript
- Props	        Pass data into components
- State	        Internal data that changes over time
- Hooks	        Add logic to function components
- Context	    Global data sharing without prop drilling
- Virtual DOM	Efficient rendering model
- useEffect	    Perform side effects (like lifecycle methods)
- Conditional   Rendering	Show/hide components dynamically
- Re-rendering	Auto updates when props/state change