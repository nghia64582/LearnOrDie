---- TO LEARN JAVA SPRING ----

- Java Core: 90
    + OOP: Encapsulation, Inheritance, Polymorphism, Abstraction - 100
    + Interfaces & Abstract Classes - 100
    + Lambdas & Streams API - 80
    + Exception Handling (try, catch) - done
    + Multithreading & Concurrency - 80
        + Create new thread, set up Runnable, start, join, ...
    
- Spring Core:
    + Spring Core
    + Dependency Injection - 
    + Inversion of Control: 
    + Bean: 
        + The objects are managed by Spring IoC
    + Spring Profiles – Manage different environments (dev, prod, test)
    + How to start a new spring project - 100
    + Spring Boot Auto-Configuration – No need for complex XML configs
    + Creating REST APIs with @RestController (setup endpoint, response data, ...) - 100
    + Handling HTTP Requests & Responses (@RequestMapping, @GetMapping) - 100
    + DTOs & Model Mapping (@RequestBody, @ResponseBody) - done
    + Exception Handling (@ControllerAdvice) - 80
    + Logging with SLF4J & Logback

- Spring Data JPA & Database
    + Connect to MySQL/PostgreSQL using spring-boot-starter-data-jpa - 100
    + JPA & Hibernate ORM – @Entity, @Id, @GeneratedValue, @OneToMany, @ManyToOne - 90
    + Spring Data Repositories (CrudRepository, JpaRepository) - 70
    + Custom Queries with @Query (JPQL & Native SQL) - 70
    + Transaction Management (@Transactional) - 90

- Spring Security (Authentication & Authorization)
    + Basic Authentication (spring-boot-starter-security)
    + Role-Based Access Control (@PreAuthorize)
    + JWT (JSON Web Token) for Authentication
    + OAuth2 for Google/Facebook Login

- Spring Boot with Frontend & APIs
    + RESTful API Design Best Practices
    + CORS Handling (@CrossOrigin)
    + Integrating with React.js, Angular, or Vue.js
    + Calling External APIs (RestTemplate, WebClient)

- Advanced Spring Topics
    + Spring Boot Caching (@Cacheable)
    + Spring WebFlux (Reactive Programming)
    + Spring Cloud (Microservices, Eureka, Feign, Resilience4J)
    + Kafka & RabbitMQ for Event-Driven Architecture

- AOP : 90
    + The technique is used to add logic of a method to "other method" without 
        writing the code which is directly dependent to "other method"
    + Perfect to handle some popular problems:
        + Counting method calls times
        + Handle redis, caching strategy
        + Measure runtime