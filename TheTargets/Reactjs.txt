- Prerequisites (Before React)
    + HTML, CSS, JavaScript (ES6+)
    + DOM Manipulation (document.querySelector, addEventListener)
    + JavaScript Concepts:
    + ES6+ Features: let, const, arrow functions, template literals
    + Destructuring, spread/rest operators
    + Modules & Imports (import/export)
    + Promises & async/await
    + Array Methods (map, filter, reduce)
    =====> Practice: Build small projects using vanilla JavaScript before React.

- React Basics
    + Understanding React:
        + What is React? Why React?
        + SPA (Single Page Applications) vs. Multi-Page Applications
        + JSX (JavaScript XML)
    + Core Concepts:
        + Components (function vs. class components)
        + Props (Passing data between components)
        + State (useState hook)
        + Event Handling (onClick, onChange)
        + Conditional Rendering (&&, ternary operator)
        + Lists & Keys (map to render lists)
    =====> Project Idea: Build a Todo App to practice state & props.

- Intermediate React
    + React Hooks (Must Learn)
        + useEffect (Handling side effects, API calls)
        + useContext (Avoid prop drilling)
        + useRef (Manipulating DOM directly)
        + useReducer (Alternative to useState for complex logic)
    + React Router
        + react-router-dom
        + Dynamic Routes (:id)
        + Programmatic Navigation (useNavigate, useParams)
    + State Management
        + Lifting State Up (Sharing state between components)
        + Context API (For global state)
        + Redux Toolkit (For large-scale applications)
    =====> Project Idea: Build a Weather App using API calls & React Router.

- Advanced React
    + Performance Optimization
        + React.memo (Optimize re-rendering)
        + useCallback & useMemo (Memoization)
        + Code Splitting & Lazy Loading (React.lazy, Suspense)
    + Advanced Patterns
        + Higher-Order Components (HOC)
        + Custom Hooks (useFetch, useToggle)
        + Compound Components
    + Fetching Data & API Handling
        + fetch() vs. axios
        + Error handling & loading states
    =====> Project Idea: Build an E-commerce App with Redux & API integration.

- Full-Stack React (Optional but Useful)
    + Backend Integration
        + Node.js + Express.js
        + REST API vs GraphQL
        + Authentication (JWT, OAuth)
    + Database Choices
        + MySQL / PostgreSQL (SQL)
        + MongoDB / Firebase (NoSQL)
    =====> Project Idea: Build a MERN Stack App (React + Node.js + MongoDB).

- Deployment & Best Practices
    + Deployment
        Vercel, Netlify (for frontend)
        Docker, AWS, DigitalOcean (for full-stack)
    + Testing in React
        Jest & React Testing Library
        Cypress (End-to-End Testing)
    + Best Practices
        Folder Structure (components/, hooks/, pages/)
        Writing Clean Code (DRY, SOLID principles)
- Bonus (Extra Topics for Growth)
    + TypeScript with React
    + Server-Side Rendering (Next.js)
    + React Native (for Mobile Development)
    + WebSockets (Real-time updates)

------ SUMMARY: React Learning Path
    + Learn JavaScript (ES6+), HTML, CSS
    + Master React Fundamentals (JSX, Props, State, Hooks)
    + React Router, State Management (Redux, Context API)
    + Optimize Performance (React.memo, useMemo, Lazy Loading)
    + Integrate Backend (Node.js, APIs, Authentication)
    + Deploy and Test Your Applications

