*** STAGE 1: Docker Fundamentals (Beginner)

- Understanding Containerization: 90
    + What is containerization?
    + Why use Docker?
    + Virtual machines vs. containers.
- Docker Installation: 90
    + Install Docker Desktop (Windows/macOS) or Docker Engine (Linux).
    + Verify installation.

- Docker concept: 
    + Dockerfile :
        + Script to define how to build an image
        + Popular steps (layer) in Dockerfile:
            + Start from an image (from resitry)    : FROM maven:3.9.6-eclipse-temurin-17
            + Set working directory                 : WORKDIR /app
            + Copy code project to docker container : COPY . /app
            + Run command to download dependencies  : 
            + Run command to run the app            : CMD ["python", "app/src/main.py"]

    + Docker Image:
        + A blueprint of docker container
        + Template to build docker container
        + Created from Dockerfile
        + Store in docker hub/ registry
        + Contain several image layers
        + Image layer:
            + Each command in Dockerfile create a layer.
            + Layers are cached, if we built 7 layers and change the 5th, so it will run quickly from 1 -> 4
        + Command:
            + docker pull <image>	            Download an image from Docker Hub.
            + docker images	                    List all downloaded images.
            + docker rmi <image>	            Remove an image.
            + docker tag <image> <repo>:<tag>	Tag an image for pushing to a registry.
            + docker push <repo>:<tag>	        Push an image to a registry.
            + docker build -t myapp .	        Build an image from a Dockerfile.

    + Docker Container:
        + Isolated runtime enviroments created from image
        + Run application across different enviroments
        + Can be started, stopped, restarted and removed
        + Command:
            + docker ps	                                    List running containers.
            + docker ps -a	                                List all containers (including stopped ones).
            + docker run -d --name myapp -p 8080:80 nginx	Run a container in detached mode.
                + Some parameters:
                    + --name <container_name> => set up container name
                    + -p <host_port>:<container_port> => Map port
                    + --rm : remove container when it stops 
                    + -v    <host_part>:<container_path> => Map volume by host part ()
                    +     <volume_name>:<container_path> => Map volumn by name (should be create before)
                    + --hostname <host_name>
                    + -e set environment variables:
                        + MYSQL_ROOT_PASSWORD:
                        + MYSQL_DATABASE :
                        + ....
                    + -d	Run container in detached mode (background).
                    + -it	Interactive mode with a terminal (useful for debugging).
                    + --network	Connect the container to a specific network.

Example:
            + docker start <container>	                    Start a stopped container.
            + docker stop <container>	                    Stop a running container.
            + docker restart <container>	                Restart a container.
            + docker rm <container>	                        Remove a container.
            + docker logs -f <container>	                View real-time logs of a container.

    + Docker Hub/ Registry:
        + A place to store and distribute docker image
        + Public registry: hub.docker.com
        + Command:
            + docker push <repo>:<tag>	        Push an image to a registry.
            + docker tag <image> <repo>:<tag>	Tag an image for pushing to a registry.
            + docker pull <image>	            Download an image from Docker Hub.

    + Docker Compose :
        + A tool for managing multi-container applications.
        + Uses a docker-compose.yml file to define services.
        + Command:
            + docker-compose up -d	        Start all services in docker-compose.yml.
            + docker-compose down	        Stop and remove all services.
            + docker-compose ps	            List running services.
            + docker-compose logs -f        View logs of all services.
            + docker-compose build	        Build images for all services.

    + Docker Volume:
        + A persistent storage mechanism for containers.
        + Prevents data loss when containers restart.
        + Mounted into a container at a specific path.
        + Command: 
            + docker volume create my-data
            + docker run -d -v my-data:/app/data my-app

    + Docker network:
        + Command:
            + docker network ls                                         : Show all networks
            + docker network inspect my_network                         : Show network info 
            + docker network create my_custom_network                   : Create a network
            + docker network rm my_custom_network                       : Remove the network (only able to do if no container is using network)
            + docker network connect my_network <container_name>        : Add a container to a network 
            + docker network disconnect my_network <container_name>     : Disconnect a container to a network
            + docker network prune                                      : Delete all not-in-used networks
            + docker run --network=my_network -d <my_container>         : Start a container in a network

- SUMMARY:
    - To run your application in a new enviroment:
        + S1: Determine all required app to run your system:
            + Database : MySQL, MariaDB, MongoDB, ...
            + All of your apps: single app for monolith, apps for microservices
        + S2: Prepare all step to setup each apps to run in docker container:
            + For database : Pull docker images from registry and run with parameters like root pass, port, ...
            + For app      : Write dockerfile to run docker container, and put it in each projects
        + S3: Push all code to GitHub
        + S4: Pull from GitHub to deploy PC
        + S5: For each app, run docker build to create image
        + S6: Run "docker run" to run the container with each app.

--- IMPORTANT:
    + To communicate app between docker container:
        + We need to use container name or host name 
            (need to declare in docker command, avoid implicit declaration)
        + Create specific network instead of default to communicate between containers in docker
            like docker network create my-network
    + Should use docker command to build and run image instead of docker desktop since we can pass params easily, ..
    + Priority level:
        + When we have multiple properties definitions, there is a specific priority level:
            - L1 (highest): variable in docker command line (docker run -e or docker-compose run -e)
            - L2 : enviroment in docker-compose.yml file
            - L3 : env_file in docker-compose.yml file (rarely used)
            - L4 : ENV in Dockerfile
            - L5 : application.properties, application.yml, config file in project

- Working with Docker Images:
    + Understanding Docker Hub.
    + Pulling and running pre-built images.
    + Understanding image layers.
- Basic Dockerfiles:
    + Create simple Dockerfiles.
    + Understanding FROM, RUN, CMD, ENTRYPOINT.
    + docker build command.
- Simple Volume Mounting:
    + Understanding the basics of persisting data with volumes.

*** STAGE 2: Docker Networking and Volumes (Intermediate)

- Docker Networking:
    + Understanding Docker network drivers (bridge, host, overlay).
    + Creating custom networks.
    + Container communication.
    + Exposing ports.
- Advanced Docker Volumes:
    + Named volumes vs. bind mounts.
    + Managing volume lifecycles.
    + Data persistence strategies.
- Docker Compose:
    + Understanding Docker Compose for multi-container applications.
    + Creating docker-compose.yml files.
    + docker-compose up/down.
    + Understanding dependencies and linking containers.
- Dockerfile Best Practices:
    + Optimizing Dockerfile size.
    + Using .dockerignore.
    + Security best practices.
    + Multi-stage builds.
- Docker Logs and Inspection:
    + docker logs: View container logs.
    + docker inspect: Inspect container and image details.

*** STAGE 3: Docker Orchestration and Advanced Concepts (Advanced)
- Docker Swarm (or Kubernetes):
    + Understanding container orchestration.
    + Setting up a Docker Swarm cluster.
    + Deploying services in Swarm.
    + Or, Kubernetes. Kubernetes has become the industry standard.
- Docker Security:
    + Docker security best practices.
    + Image scanning and vulnerability management.
    + User namespaces and security profiles.
- Docker Registry:
    + Setting up a private Docker registry.
    + Pushing and pulling images to/from the registry.
- Docker CI/CD Integration:
    + Integrating Docker with CI/CD pipelines (e.g., Jenkins, GitLab CI, GitHub Actions).
    + Automating Docker image builds and deployments.
- Docker Monitoring and Logging:
    + Monitoring Docker container performance.
    + Centralized logging with tools like ELK stack or Grafana Loki.
- Docker Storage Drivers:
    + Understanding the different storage drivers.
- Docker in Cloud Environments:
    + Deploying Docker containers on cloud platforms (AWS ECS, Azure Container Instances, Google Cloud Run).

*** STAGE 4: Advanced Orchestration (Expert)

- Kubernetes Deep Dive:
    + Pods, deployments, services, namespaces.
    + ConfigMaps and Secrets.
    + Ingress controllers.
    + Helm charts.
    + Operators.
- Service Meshes:
    + Understanding service meshes (e.g., Istio, Linkerd).
    + Implementing service meshes for microservices.
- Advanced CI/CD with Kubernetes:
    + GitOps.
    + Advanced deployment strategies (Canary, Blue/Green).
- Serverless Containerization:
    + Understanding serverless container platforms.
    + Deploying serverless containers.